#!/usr/bin/env node

/**
 * Single-Click Database and Domain Configuration
 * Automatically configures MySQL database and ienet.online domain
 */

import mysql from 'mysql2/promise';
import fs from 'fs';

const CONFIG = {
  // Production Database
  database: {
    host: '5.181.218.15',
    port: 3306,
    user: 'netiedb',
    password: 'h5pLF9833',
    database: 'ienetdb'
  },
  
  // Domain Configuration
  domain: 'ienet.online',
  
  // Backup Files
  backupFile: 'ienet-mysql-backup-complete.sql'
};

class SingleClickSetup {
  constructor() {
    this.config = CONFIG;
    this.connection = null;
  }

  async run() {
    console.log('🚀 Starting Single-Click Setup for ienet.online');
    console.log(`📊 Database: ${this.config.database.host}:${this.config.database.port}`);
    console.log(`🌐 Domain: ${this.config.domain}`);
    
    try {
      // Step 1: Test database connection
      await this.testConnection();
      
      // Step 2: Deploy database backup
      await this.deployDatabase();
      
      // Step 3: Verify deployment
      await this.verifyDeployment();
      
      // Step 4: Create production config
      await this.createProductionConfig();
      
      // Step 5: Setup application
      await this.setupApplication();
      
      console.log('✅ Single-Click Setup Complete!');
      this.showSummary();
      
    } catch (error) {
      console.error('❌ Setup failed:', error.message);
      process.exit(1);
    } finally {
      if (this.connection) {
        await this.connection.end();
      }
    }
  }

  async testConnection() {
    console.log('🔍 Testing database connection...');
    
    try {
      this.connection = await mysql.createConnection(this.config.database);
      const [rows] = await this.connection.execute('SELECT 1 as test');
      console.log('✅ Database connection successful');
    } catch (error) {
      throw new Error(`Database connection failed: ${error.message}`);
    }
  }

  async deployDatabase() {
    console.log('📤 Deploying database backup...');
    
    if (!fs.existsSync(this.config.backupFile)) {
      throw new Error(`Backup file not found: ${this.config.backupFile}`);
    }
    
    const backupContent = fs.readFileSync(this.config.backupFile, 'utf8');
    
    // Split SQL statements and execute
    const statements = backupContent
      .split(';')
      .map(stmt => stmt.trim())
      .filter(stmt => stmt.length > 0 && !stmt.startsWith('--'));
    
    console.log(`📋 Executing ${statements.length} SQL statements...`);
    
    for (const statement of statements) {
      if (statement.trim()) {
        try {
          await this.connection.execute(statement);
        } catch (error) {
          if (!error.message.includes('already exists')) {
            console.warn(`⚠️ SQL Warning: ${error.message}`);
          }
        }
      }
    }
    
    console.log('✅ Database backup deployed successfully');
  }

  async verifyDeployment() {
    console.log('🔍 Verifying database deployment...');
    
    try {
      // Check tables
      const [tables] = await this.connection.execute('SHOW TABLES');
      console.log(`✅ Found ${tables.length} tables`);
      
      // Check service categories
      const [categories] = await this.connection.execute('SELECT COUNT(*) as count FROM service_categories');
      console.log(`✅ Service categories: ${categories[0].count}`);
      
      // Check site settings
      const [settings] = await this.connection.execute('SELECT * FROM site_settings WHERE `key` = "site_name"');
      if (settings.length > 0) {
        console.log(`✅ Site name: ${settings[0].value}`);
      }
      
      console.log('✅ Database verification complete');
    } catch (error) {
      throw new Error(`Database verification failed: ${error.message}`);
    }
  }

  async createProductionConfig() {
    console.log('⚙️ Creating production configuration...');
    
    // Environment configuration
    const envConfig = `# Production Environment - ienet.online
# Auto-generated by single-click setup

DATABASE_URL=mysql://netiedb:h5pLF9833@5.181.218.15:3306/ienetdb
DB_HOST=5.181.218.15
DB_PORT=3306
DB_NAME=ienetdb
DB_USER=netiedb
DB_PASSWORD=h5pLF9833

DOMAIN=ienet.online
NODE_ENV=production
PORT=5000

# Security
SESSION_SECRET=ienet-secure-session-${Date.now()}
JWT_SECRET=ienet-jwt-secret-${Date.now()}

# SSL
SSL_REDIRECT=true
SECURE_COOKIES=true
`;

    fs.writeFileSync('.env.production.example', envConfig);
    console.log('✅ Production environment config created (.env.production.example)');
    
    // Application configuration
    const appConfig = {
      database: {
        type: 'mysql',
        host: this.config.database.host,
        port: this.config.database.port,
        database: this.config.database.database,
        user: this.config.database.user,
        // Password excluded for security
      },
      domain: this.config.domain,
      environment: 'production',
      features: {
        ssl: true,
        compression: true,
        caching: true,
        analytics: true
      },
      deployment: {
        status: 'ready',
        date: new Date().toISOString(),
        version: '1.0.0'
      }
    };
    
    fs.writeFileSync('production-config.json', JSON.stringify(appConfig, null, 2));
    console.log('✅ Application config created (production-config.json)');
  }

  async setupApplication() {
    console.log('🔧 Setting up application...');
    
    // Update package.json with production scripts
    const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));
    
    packageJson.scripts = {
      ...packageJson.scripts,
      'start:production': 'NODE_ENV=production npm start',
      'db:status': 'node check-database-status.js',
      'deploy:verify': 'node verify-deployment.js',
      'setup:complete': 'node single-click-setup.js'
    };
    
    fs.writeFileSync('package.json', JSON.stringify(packageJson, null, 2));
    console.log('✅ Package.json updated with production scripts');
    
    // Create status check script
    const statusScript = `#!/usr/bin/env node
import mysql from 'mysql2/promise';

const config = {
  host: '5.181.218.15',
  port: 3306,
  user: 'netiedb',
  password: 'h5pLF9833',
  database: 'ienetdb'
};

async function checkStatus() {
  try {
    const connection = await mysql.createConnection(config);
    const [tables] = await connection.execute('SHOW TABLES');
    const [categories] = await connection.execute('SELECT COUNT(*) as count FROM service_categories');
    
    console.log('🟢 Database Status: HEALTHY');
    console.log(\`📊 Tables: \${tables.length}\`);
    console.log(\`📋 Categories: \${categories[0].count}\`);
    console.log('🌐 Domain: ienet.online');
    console.log('✅ Ready for production');
    
    await connection.end();
  } catch (error) {
    console.log('🔴 Database Status: ERROR');
    console.error(error.message);
    process.exit(1);
  }
}

checkStatus();
`;
    
    fs.writeFileSync('check-database-status.js', statusScript);
    console.log('✅ Database status checker created');
  }

  showSummary() {
    console.log('\n🎉 SETUP COMPLETE - ienet.online');
    console.log('═══════════════════════════════════');
    console.log('📊 Database: MySQL deployed and verified');
    console.log('🌐 Domain: ienet.online configured');
    console.log('⚙️ Config: Production settings created');
    console.log('🔧 Scripts: Deployment tools ready');
    console.log('\n📋 Files Created:');
    console.log('• .env.production.example - Environment variables');
    console.log('• production-config.json - Application configuration');
    console.log('• check-database-status.js - Database status checker');
    console.log('\n🚀 Next Steps:');
    console.log('1. Copy .env.production.example to .env');
    console.log('2. Deploy application to ienet.online');
    console.log('3. Run: npm run db:status (to verify)');
    console.log('4. Access: https://ienet.online');
    console.log('\n✅ Your production environment is ready!');
  }
}

// Run if called directly
if (import.meta.url === `file://${process.argv[1]}`) {
  const setup = new SingleClickSetup();
  setup.run().catch(console.error);
}

export default SingleClickSetup;